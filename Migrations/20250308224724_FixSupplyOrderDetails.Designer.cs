// <auto-generated />
using System;
using EF_Project.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Project.Migrations
{
    [DbContext(typeof(ConnectorDBContext))]
    [Migration("20250308224724_FixSupplyOrderDetails")]
    partial class FixSupplyOrderDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Project.Entities.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdClient");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EF_Project.Entities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("EF_Project.Entities.InventoryItem", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("DaysSinceLastUse")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("EF_Project.Entities.Item", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("SupplierID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("EF_Project.Entities.PullOrder", b =>
                {
                    b.Property<int>("PullOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PullOrderId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("PullOrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InventoryId");

                    b.ToTable("PullOrders");
                });

            modelBuilder.Entity("EF_Project.Entities.PullOrederDetails", b =>
                {
                    b.Property<int>("PullOrederId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemCode")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierIdSupplier")
                        .HasColumnType("int");

                    b.HasKey("PullOrederId", "ItemId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierIdSupplier");

                    b.ToTable("pullOrederDetails");
                });

            modelBuilder.Entity("EF_Project.Entities.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSupplier"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EF_Project.Entities.SupplyOrder", b =>
                {
                    b.Property<int>("SupplyOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyOrderID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("SupplyOrderID");

                    b.HasIndex("InventoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplyOrders");
                });

            modelBuilder.Entity("EF_Project.Entities.SupplyOrederDetails", b =>
                {
                    b.Property<int>("SupplyOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ExperationInMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProdunctionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("SupplyOrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("supplyOrederDetails");
                });

            modelBuilder.Entity("InventoryItem", b =>
                {
                    b.Property<int>("InventoriesID")
                        .HasColumnType("int");

                    b.Property<int>("ItemsCode")
                        .HasColumnType("int");

                    b.HasKey("InventoriesID", "ItemsCode");

                    b.HasIndex("ItemsCode");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("EF_Project.Entities.InventoryItem", b =>
                {
                    b.HasOne("EF_Project.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EF_Project.Entities.Item", b =>
                {
                    b.HasOne("EF_Project.Entities.Supplier", "Supplier")
                        .WithMany("Items")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EF_Project.Entities.PullOrder", b =>
                {
                    b.HasOne("EF_Project.Entities.Client", "client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Inventory", "inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("inventory");
                });

            modelBuilder.Entity("EF_Project.Entities.PullOrederDetails", b =>
                {
                    b.HasOne("EF_Project.Entities.Item", null)
                        .WithMany("PullOrderDetails")
                        .HasForeignKey("ItemCode");

                    b.HasOne("EF_Project.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.PullOrder", "PullOrder")
                        .WithMany("PullOrderDetails")
                        .HasForeignKey("PullOrederId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Supplier", null)
                        .WithMany("PullOrderDetails")
                        .HasForeignKey("SupplierIdSupplier");

                    b.Navigation("Item");

                    b.Navigation("PullOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EF_Project.Entities.SupplyOrder", b =>
                {
                    b.HasOne("EF_Project.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("EF_Project.Entities.SupplyOrederDetails", b =>
                {
                    b.HasOne("EF_Project.Entities.Item", "Item")
                        .WithMany("SupplyOrederDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.SupplyOrder", "SupplyOrder")
                        .WithMany("supplyOrederDetails")
                        .HasForeignKey("SupplyOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplyOrder");
                });

            modelBuilder.Entity("InventoryItem", b =>
                {
                    b.HasOne("EF_Project.Entities.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Project.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Project.Entities.Item", b =>
                {
                    b.Navigation("PullOrderDetails");

                    b.Navigation("SupplyOrederDetails");
                });

            modelBuilder.Entity("EF_Project.Entities.PullOrder", b =>
                {
                    b.Navigation("PullOrderDetails");
                });

            modelBuilder.Entity("EF_Project.Entities.Supplier", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PullOrderDetails");
                });

            modelBuilder.Entity("EF_Project.Entities.SupplyOrder", b =>
                {
                    b.Navigation("supplyOrederDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
